{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\I353387\\\\Desktop\\\\proiect-covid-master\\\\src\\\\Components\\\\ColorMap.js\";\nimport React, { Component } from 'react';\nimport Loader from 'react-loader-spinner';\nimport { FeatureGroup, Map, Popup, TileLayer, Polygon, Tooltip } from 'react-leaflet';\nimport { Typography } from '@material-ui/core';\nconst API = 'https://api-covid.victorbarbat.com/';\nexport default class OtherLayersExample extends Component {\n  constructor(props) {\n    super(props);\n    this.actualCountySelected = undefined;\n\n    this.getRandomColor = () => {\n      const c0 = '#980230';\n      const c1 = '#AF0238';\n      const c2 = '#F17481';\n      const c3 = '#D50747';\n      const random = Math.random() * 4;\n\n      switch (Math.floor(random)) {\n        case 0:\n          return c0;\n\n        case 1:\n          return c1;\n\n        case 2:\n          return c2;\n\n        case 3:\n          return c3;\n      }\n    };\n\n    this.fetchCounty = countyName => {\n      fetch(API + 'romania/' + countyName).then(response => response.json()).then(data => {\n        this.setState(prevState => ({\n          dataCounties: [...prevState.dataCounties, data],\n          loadingCounties: [...prevState.loadingCounties, data.name]\n        }));\n      });\n    };\n\n    this.countyUnknow = countyName => {\n      if (this.state.knownCounties.find(element => element === countyName)) {\n        return false;\n      }\n\n      this.state.knownCounties.push(countyName);\n      return true;\n    };\n\n    this.getMapZoom = () => {\n      return this.map && this.map.leafletElement.getZoom();\n    };\n\n    this.enableDragging = () => {\n      if (this.getMapZoom() < 8) {\n        this.setState({\n          draggable: false\n        });\n        return;\n      }\n\n      this.setState({\n        draggable: true\n      });\n    };\n\n    this.handleZoom = () => {\n      this.enableDragging();\n    };\n\n    this.mouseOver = countyName => {\n      this.actualCountySelected = countyName;\n    };\n\n    this.findCounty = countyName => {\n      return this.state.dataRomania.findIndex(county => {\n        return county.name === countyName;\n      });\n    };\n\n    this.getRegion = countyName => {\n      return this.state.dataCounties.findIndex(county => {\n        return county.name === countyName;\n      });\n    };\n\n    this.countyIsLoaded = () => {\n      return this.state.loadingCounties.findIndex(county => {\n        return county === this.actualCountySelected;\n      });\n    };\n\n    this.handleCountyClicked = countyName => {\n      if (this.getMapZoom() > 8) {\n        this.actualCountySelected = countyName;\n        this.forceUpdate();\n      }\n    };\n\n    this.state = {\n      lat: 46.0,\n      lng: 25.096306,\n      zoom: 7,\n      draggable: false,\n      day: props.day,\n      dataRomania: undefined,\n      dataCounties: [],\n      knownCounties: [],\n      loadingCounties: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(API + 'romania').then(response => response.json()).then(data => {\n      this.setState({\n        dataRomania: data\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.day !== state.day) {\n      return {\n        day: props.day\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    if (this.state.dataRomania) {\n      const position = [this.state.lat, this.state.lng];\n      let arrCities = [];\n      let arrCityNames = [];\n\n      if (this.getMapZoom() > 8) {\n        if (this.countyUnknow(this.actualCountySelected)) {\n          this.fetchCounty(this.actualCountySelected);\n        }\n\n        if (this.state.dataCounties[this.getRegion(this.actualCountySelected)]) {\n          for (let city in this.state.dataCounties[this.getRegion(this.actualCountySelected)].cities) {\n            let item = this.state.dataCounties[this.getRegion(this.actualCountySelected)].cities[city];\n            arrCities.push(item);\n            arrCityNames.push(city);\n          }\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Map, {\n        style: {\n          height: \"91vh\",\n          marginTop: \"64px\"\n        },\n        ref: ref => {\n          this.map = ref;\n        },\n        center: position,\n        zoom: this.state.zoom,\n        dragging: this.state.draggable,\n        minZoom: 7,\n        maxZoom: 10,\n        onzoomend: this.handleZoom,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 1\n        }\n      }, \">\", this.getMapZoom() > 8 ? this.countyIsLoaded() <= -1 ? /*#__PURE__*/React.createElement(Polygon, {\n        positions: this.state.dataRomania[this.findCounty(this.actualCountySelected)].geometry.coordinates,\n        color: 'white',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        direction: \"center\",\n        permanent: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        type: \"Circles\",\n        color: \"#000\",\n        height: 25,\n        width: 25,\n        timeout: 10000,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 23\n        }\n      })))) : arrCities.map((city, i) => {\n        let randomColor = this.getRandomColor();\n        return /*#__PURE__*/React.createElement(Polygon, {\n          key: i,\n          positions: city.geometry.coordinates,\n          color: randomColor,\n          fillColor: randomColor,\n          fillOpacity: \"0.9\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 24\n          }\n        }, /*#__PURE__*/React.createElement(Tooltip, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 19\n          }\n        }, city.natLevName, \": \", arrCityNames[i], /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 21\n          }\n        }), \"Populatie: \", city.population));\n      }) : null, this.state.dataRomania.map((county, i) => {\n        let randomColor = this.getRandomColor();\n        return /*#__PURE__*/React.createElement(Polygon, {\n          key: i,\n          positions: county.geometry.coordinates,\n          color: randomColor,\n          fillColor: randomColor,\n          fillOpacity: \"0.9\",\n          onmouseover: () => this.mouseOver(county.name),\n          onClick: () => this.handleCountyClicked(county.name),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 22\n          }\n        }, /*#__PURE__*/React.createElement(Tooltip, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 19\n          }\n        }, \"Judet: \", county.name, /*#__PURE__*/React.createElement(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 20\n          }\n        }), \"Populatie: \", county.population));\n      }), /*#__PURE__*/React.createElement(TileLayer, {\n        attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(FeatureGroup, {\n        color: \"purple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Popup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }, \"Popup in FeatureGroup\"))));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: 'absolute',\n        marginTop: '25%',\n        marginLeft: '50%',\n        transform: 'translate(-50%, -50%)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, \"Se incarca harta\"), /*#__PURE__*/React.createElement(Loader, {\n      style: {\n        marginTop: '10px'\n      },\n      type: \"Grid\",\n      color: \"#000\",\n      height: 100,\n      width: 100,\n      timeout: 10000,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/I353387/Desktop/proiect-covid-master/src/Components/ColorMap.js"],"names":["React","Component","Loader","FeatureGroup","Map","Popup","TileLayer","Polygon","Tooltip","Typography","API","OtherLayersExample","constructor","props","actualCountySelected","undefined","getRandomColor","c0","c1","c2","c3","random","Math","floor","fetchCounty","countyName","fetch","then","response","json","data","setState","prevState","dataCounties","loadingCounties","name","countyUnknow","state","knownCounties","find","element","push","getMapZoom","map","leafletElement","getZoom","enableDragging","draggable","handleZoom","mouseOver","findCounty","dataRomania","findIndex","county","getRegion","countyIsLoaded","handleCountyClicked","forceUpdate","lat","lng","zoom","day","componentDidMount","getDerivedStateFromProps","render","position","arrCities","arrCityNames","city","cities","item","height","marginTop","ref","geometry","coordinates","i","randomColor","natLevName","population","marginLeft","transform"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Loader from 'react-loader-spinner'\r\nimport {\r\n  FeatureGroup,\r\n  Map,\r\n  Popup,\r\n  TileLayer,\r\n  Polygon,\r\n  Tooltip\r\n} from 'react-leaflet'\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst API = 'https://api-covid.victorbarbat.com/';\r\n\r\n\r\nexport default class OtherLayersExample extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lat: 46.0,\r\n            lng: 25.096306,\r\n            zoom: 7,\r\n            draggable: false,\r\n            day: props.day,\r\n            dataRomania: undefined,\r\n            dataCounties: [],\r\n            knownCounties: [],\r\n            loadingCounties: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n      fetch(API + 'romania')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({ dataRomania: data })\r\n      }); \r\n  }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n      if (props.day !== state.day) {\r\n        return {\r\n          day: props.day\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    map;\r\n    actualCountySelected = undefined;\r\n    getRandomColor = () => {\r\n        const c0 = '#980230';\r\n        const c1 = '#AF0238'\r\n        const c2 = '#F17481';\r\n        const c3 = '#D50747';\r\n        const random = (Math.random() * 4);\r\n        \r\n        switch(Math.floor(random)){\r\n          case 0: \r\n            return c0;\r\n          case 1: \r\n            return c1;\r\n          case 2:\r\n            return c2;\r\n          case 3: \r\n            return c3;\r\n        }\r\n    }\r\n    \r\n    fetchCounty = (countyName) => {\r\n        fetch(API + 'romania/' + countyName)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          this.setState(prevState => ({\r\n              dataCounties: [...prevState.dataCounties, data],\r\n              loadingCounties: [...prevState.loadingCounties, data.name]\r\n          }));\r\n        }\r\n        )\r\n    };\r\n\r\n    countyUnknow = (countyName) => {\r\n        if(this.state.knownCounties.find(element => element === countyName)){\r\n          return false;\r\n        }\r\n          this.state.knownCounties.push(countyName);\r\n          return true;      \r\n    };\r\n\r\n    getMapZoom = () => {\r\n      return this.map && this.map.leafletElement.getZoom();\r\n    }\r\n\r\n    enableDragging = () => {\r\n      if (this.getMapZoom() < 8) {\r\n        this.setState({\r\n          draggable: false,\r\n        });\r\n        return;\r\n    }\r\n    this.setState({draggable: true});\r\n    }\r\n  \r\n    handleZoom = () => {\r\n      this.enableDragging();\r\n    };\r\n\r\n    mouseOver = (countyName) => {\r\n      this.actualCountySelected = countyName;\r\n    };\r\n\r\n    findCounty = (countyName) => {\r\n       return this.state.dataRomania.findIndex(county => {\r\n          return county.name === countyName;\r\n        });\r\n    };\r\n\r\n    getRegion = (countyName) => {\r\n        return this.state.dataCounties.findIndex(county => {\r\n          return county.name === countyName;\r\n        })\r\n        \r\n    };\r\n\r\n    countyIsLoaded = () => {\r\n      return this.state.loadingCounties.findIndex(county => {\r\n          return county === this.actualCountySelected;\r\n      });\r\n    };\r\n\r\n    handleCountyClicked = (countyName) => {\r\n        if(this.getMapZoom() > 8) {\r\n            this.actualCountySelected = countyName;\r\n            this.forceUpdate();\r\n        }\r\n    };\r\n\r\n  render() {\r\n    if(this.state.dataRomania) {\r\n    const position = [this.state.lat, this.state.lng];\r\n    let arrCities = [];\r\n    let arrCityNames = [];\r\n    if ((this.getMapZoom() > 8)) {\r\n      if(this.countyUnknow(this.actualCountySelected)) {    \r\n         this.fetchCounty(this.actualCountySelected);\r\n      }\r\n      \r\n      if(this.state.dataCounties[this.getRegion(this.actualCountySelected)]){\r\n  \r\n        for(let city in this.state.dataCounties[this.getRegion(this.actualCountySelected)].cities) {\r\n          let item = this.state.dataCounties[this.getRegion(this.actualCountySelected)].cities[city];\r\n          arrCities.push(item);\r\n          arrCityNames.push(city);\r\n        }\r\n    }\r\n\r\n    }\r\n        return (\r\n          <div>\r\n\r\n<Map style={{ height: \"91vh\", marginTop: \"64px\" }}\r\n      ref = {(ref) => {this.map = ref}}\r\n      center={position}\r\n      zoom={this.state.zoom}\r\n      dragging={this.state.draggable}\r\n      minZoom={7}\r\n      maxZoom={10}\r\n      onzoomend={this.handleZoom}\r\n      >>\r\n          {\r\n            this.getMapZoom() > 8 \r\n            ?\r\n              this.countyIsLoaded() <= -1 ? \r\n              <Polygon\r\n              positions={this.state.dataRomania[this.findCounty(this.actualCountySelected)].geometry.coordinates}\r\n              color={'white'}\r\n              >\r\n                  <Tooltip direction={\"center\"} permanent>\r\n                      <center>\r\n                      <Loader\r\n                          type=\"Circles\"\r\n                          color=\"#000\"\r\n                          height={25}\r\n                          width={25}\r\n                          timeout={10000}\r\n                      />\r\n                      </center>\r\n                    </Tooltip>\r\n              </Polygon> \r\n              :\r\n              arrCities.map((city, i ) => {\r\n                let randomColor = this.getRandomColor()\r\n                return <Polygon\r\n                key={i}\r\n                positions={city.geometry.coordinates}\r\n                color={randomColor}\r\n                fillColor = {randomColor}\r\n                fillOpacity = '0.9'\r\n                >\r\n                  <Tooltip>\r\n                    {city.natLevName}: {arrCityNames[i]}\r\n                    <br/>\r\n                    Populatie: {city.population}\r\n                  </Tooltip>\r\n                </Polygon>\r\n            })\r\n          :\r\n          null\r\n          }\r\n\r\n          {\r\n            this.state.dataRomania.map((county, i ) => {\r\n              let  randomColor = this.getRandomColor()\r\n              return <Polygon\r\n               key={i}\r\n               positions={county.geometry.coordinates}\r\n               color= {randomColor}\r\n               fillColor = {randomColor}\r\n               fillOpacity= \"0.9\"\r\n               onmouseover = {() => this.mouseOver(county.name)}\r\n               onClick={() => this.handleCountyClicked(county.name)}\r\n              >\r\n                  <Tooltip>\r\n                   Judet: {county.name}\r\n                   <br/>\r\n                    Populatie: {county.population}\r\n                  </Tooltip>\r\n              </Polygon>\r\n            })\r\n          }\r\n              \r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://server.arcgisonline.com/ArcGIS/rest/services/Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}\"\r\n        />\r\n        <FeatureGroup color=\"purple\">\r\n          <Popup>Popup in FeatureGroup</Popup>\r\n        </FeatureGroup>\r\n      </Map>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n      <div style={{ position: 'relative'}}>\r\n        <div style={{ position: 'absolute', marginTop: '25%',  marginLeft: '50%',  transform: 'translate(-50%, -50%)'}}>\r\n        <center>\r\n          <Typography variant='h4'>Se incarca harta</Typography>\r\n         \r\n          <Loader style={{marginTop:'10px'}}\r\n              type=\"Grid\"\r\n              color=\"#000\"\r\n              height={100}\r\n              width={100}\r\n              timeout={10000}\r\n          />\r\n          </center>\r\n          </div>\r\n      </div>\r\n  )\r\n  } \r\n\r\n}"]},"metadata":{},"sourceType":"module"}