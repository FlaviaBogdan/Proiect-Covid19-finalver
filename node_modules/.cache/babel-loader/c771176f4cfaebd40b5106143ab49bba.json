{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\I353387\\\\Desktop\\\\proiect-covid-master\\\\src\\\\Components\\\\ColorMap.js\";\nimport React, { Component } from 'react';\nimport { Circle, FeatureGroup, LayerGroup, Map, Popup, Rectangle, TileLayer, Polygon, CircleMarker, Tooltip } from 'react-leaflet';\nimport Typography from '@material-ui/core/Typography';\nimport data from \"./countyRomania.json\";\nconst center = [51.505, -0.09];\nconst rectangle = [[51.49, -0.08], [51.5, -0.06]];\nexport default class OtherLayersExample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomColor = () => {\n      var letters = '0123456789ABCDEF';\n      var color = '#';\n\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n\n      return color;\n    };\n\n    this.getMapZoom = () => {\n      return this.map && this.map.leafletElement.getZoom();\n    };\n\n    this.enableDragging = () => {\n      if (this.getMapZoom() < 8) {\n        this.setState({\n          draggable: false\n        });\n        return;\n      }\n\n      this.setState({\n        draggable: true\n      });\n    };\n\n    this.state = {\n      lat: 46.0,\n      lng: 25.096306,\n      zoom: 7,\n      draggable: false,\n      day: props.day\n    }; //console.log(data.features);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.day !== state.day) {\n      return {\n        day: props.day\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng]; // let arrCities = [];\n    // let arrCityNames = [];\n    // if (this.getMapZoom() > 8) {\n    //   for(let city in data.cities) {\n    //     let item = data.cities[city];\n    //     arrCities.push(item);\n    //     console.log(item);\n    //     arrCityNames.push(city);\n    //   }\n    // }\n\n    let arrCounty = [];\n\n    for (let position in data.features) {\n      let feature = data.features[position];\n      arrCounty.push(feature);\n      console.log(feature);\n    }\n\n    return /*#__PURE__*/React.createElement(Map, {\n      style: {\n        height: \"80vh\",\n        marginTop: \"45px\"\n      },\n      ref: ref => {\n        this.map = ref;\n      },\n      center: position,\n      zoom: this.state.zoom,\n      dragging: this.state.draggable,\n      minZoom: 6,\n      maxZoom: 10,\n      onzoomend: this.enableDragging,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, \">\", arrCounty.map((county, i) => {\n      return /*#__PURE__*/React.createElement(Polygon, {\n        key: i,\n        positions: county.geometry.coordinates,\n        color: this.getRandomColor(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, \"Judet: \", county.properties.name, /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 19\n        }\n      }), \"Populatie: \", county.properties.pop2011));\n    }), /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(FeatureGroup, {\n      color: \"purple\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, \"Popup in FeatureGroup\")));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/I353387/Desktop/proiect-covid-master/src/Components/ColorMap.js"],"names":["React","Component","Circle","FeatureGroup","LayerGroup","Map","Popup","Rectangle","TileLayer","Polygon","CircleMarker","Tooltip","Typography","data","center","rectangle","OtherLayersExample","constructor","props","getRandomColor","letters","color","i","Math","floor","random","getMapZoom","map","leafletElement","getZoom","enableDragging","setState","draggable","state","lat","lng","zoom","day","getDerivedStateFromProps","render","position","arrCounty","features","feature","push","console","log","height","marginTop","ref","county","geometry","coordinates","properties","name","pop2011"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,MADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,GAJF,EAKEC,KALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,OARF,EASEC,YATF,EAUEC,OAVF,QAWO,eAXP;AAYA,OAAOC,UAAP,MAAuB,8BAAvB;AAGA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,MAAMC,MAAM,GAAG,CAAC,MAAD,EAAS,CAAC,IAAV,CAAf;AACA,MAAMC,SAAS,GAAG,CAChB,CAAC,KAAD,EAAQ,CAAC,IAAT,CADgB,EAEhB,CAAC,IAAD,EAAO,CAAC,IAAR,CAFgB,CAAlB;AAMA,eAAe,MAAMC,kBAAN,SAAiCf,SAAjC,CAA2C;AACxDgB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAsBnBC,cAtBmB,GAsBF,MAAM;AACrB,UAAIC,OAAO,GAAG,kBAAd;AACA,UAAIC,KAAK,GAAG,GAAZ;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BD,QAAAA,KAAK,IAAID,OAAO,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAAD,CAAhB;AACD;;AACD,aAAOJ,KAAP;AACD,KA7BkB;;AAAA,SA8CnBK,UA9CmB,GA8CN,MAAM;AACjB,aAAO,KAAKC,GAAL,IAAY,KAAKA,GAAL,CAASC,cAAT,CAAwBC,OAAxB,EAAnB;AACD,KAhDkB;;AAAA,SAiDnBC,cAjDmB,GAiDF,MAAM;AACrB,UAAI,KAAKJ,UAAL,KAAoB,CAAxB,EAA2B;AACzB,aAAKK,QAAL,CAAc;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAd;AACA;AACD;;AACD,WAAKD,QAAL,CAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAvDkB;;AAEjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,GAAG,EAAE,IADM;AAEXC,MAAAA,GAAG,EAAE,SAFM;AAGXC,MAAAA,IAAI,EAAE,CAHK;AAIXJ,MAAAA,SAAS,EAAE,KAJA;AAKXK,MAAAA,GAAG,EAAEnB,KAAK,CAACmB;AALA,KAAb,CAFiB,CASjB;AACD;;AAED,SAAOC,wBAAP,CAAgCpB,KAAhC,EAAuCe,KAAvC,EAA8C;AAC5C,QAAIf,KAAK,CAACmB,GAAN,KAAcJ,KAAK,CAACI,GAAxB,EAA6B;AAC3B,aAAO;AACLA,QAAAA,GAAG,EAAEnB,KAAK,CAACmB;AADN,OAAP;AAGD;;AACD,WAAO,IAAP;AACD;;AAsCDE,EAAAA,MAAM,GAAG;AACP,UAAMC,QAAQ,GAAG,CAAC,KAAKP,KAAL,CAAWC,GAAZ,EAAiB,KAAKD,KAAL,CAAWE,GAA5B,CAAjB,CADO,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAIM,SAAS,GAAG,EAAhB;;AACA,SAAK,IAAID,QAAT,IAAqB3B,IAAI,CAAC6B,QAA1B,EAAoC;AAClC,UAAIC,OAAO,GAAG9B,IAAI,CAAC6B,QAAL,CAAcF,QAAd,CAAd;AACAC,MAAAA,SAAS,CAACG,IAAV,CAAeD,OAAf;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACD;;AAED,wBACI,oBAAC,GAAD;AAAK,MAAA,KAAK,EAAE;AAAEI,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,SAAS,EAAE;AAA7B,OAAZ;AACE,MAAA,GAAG,EAAGC,GAAD,IAAS;AAAE,aAAKtB,GAAL,GAAWsB,GAAX;AAAgB,OADlC;AAEE,MAAA,MAAM,EAAET,QAFV;AAGE,MAAA,IAAI,EAAE,KAAKP,KAAL,CAAWG,IAHnB;AAIE,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWD,SAJvB;AAKE,MAAA,OAAO,EAAE,CALX;AAME,MAAA,OAAO,EAAE,EANX;AAOE,MAAA,SAAS,EAAE,KAAKF,cAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA2BIW,SAAS,CAACd,GAAV,CAAc,CAACuB,MAAD,EAAS5B,CAAT,KAAe;AAC3B,0BAAO,oBAAC,OAAD;AACL,QAAA,GAAG,EAAEA,CADA;AAEL,QAAA,SAAS,EAAE4B,MAAM,CAACC,QAAP,CAAgBC,WAFtB;AAGL,QAAA,KAAK,EAAE,KAAKjC,cAAL,EAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKL,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACU+B,MAAM,CAACG,UAAP,CAAkBC,IAD5B,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,iBAGcJ,MAAM,CAACG,UAAP,CAAkBE,OAHhC,CALK,CAAP;AAWD,KAZD,CA3BJ,eAoDE,oBAAC,SAAD;AACE,MAAA,WAAW,EAAC,2EADd;AAEE,MAAA,GAAG,EAAC,oDAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApDF,eAwDE,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,CAxDF,CADJ;AA8DD;;AA5IuD","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n  Circle,\r\n  FeatureGroup,\r\n  LayerGroup,\r\n  Map,\r\n  Popup,\r\n  Rectangle,\r\n  TileLayer,\r\n  Polygon,\r\n  CircleMarker,\r\n  Tooltip\r\n} from 'react-leaflet'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nimport data from \"./countyRomania.json\";\r\nconst center = [51.505, -0.09]\r\nconst rectangle = [\r\n  [51.49, -0.08],\r\n  [51.5, -0.06],\r\n]\r\n\r\n\r\nexport default class OtherLayersExample extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lat: 46.0,\r\n      lng: 25.096306,\r\n      zoom: 7,\r\n      draggable: false,\r\n      day: props.day\r\n    };\r\n    //console.log(data.features);\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.day !== state.day) {\r\n      return {\r\n        day: props.day\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  map;\r\n  getRandomColor = () => {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n  //  drawCities = () => {\r\n  //    let arrCities = [];\r\n  //     for(let city in data.cities) {\r\n  //       let item = data.cities[city];\r\n  //       arrCities.push(item);\r\n  //     }\r\n  //     arrCities.map((city, i ) => {\r\n  //         return <Polygon\r\n  //         positions={city.geometry.coordinates}\r\n  //         color=\"red\"\r\n  //         >\r\n  //           <Tooltip>TOOLTIP</Tooltip>\r\n  //         </Polygon>\r\n  //     });\r\n  //  }\r\n\r\n  getMapZoom = () => {\r\n    return this.map && this.map.leafletElement.getZoom();\r\n  }\r\n  enableDragging = () => {\r\n    if (this.getMapZoom() < 8) {\r\n      this.setState({ draggable: false });\r\n      return;\r\n    }\r\n    this.setState({ draggable: true });\r\n  };\r\n\r\n  render() {\r\n    const position = [this.state.lat, this.state.lng];\r\n    // let arrCities = [];\r\n    // let arrCityNames = [];\r\n    // if (this.getMapZoom() > 8) {\r\n    //   for(let city in data.cities) {\r\n    //     let item = data.cities[city];\r\n    //     arrCities.push(item);\r\n    //     console.log(item);\r\n    //     arrCityNames.push(city);\r\n    //   }\r\n    // }\r\n\r\n    let arrCounty = [];\r\n    for (let position in data.features) {\r\n      let feature = data.features[position];\r\n      arrCounty.push(feature);\r\n      console.log(feature);\r\n    }\r\n\r\n    return (\r\n        <Map style={{ height: \"80vh\", marginTop: \"45px\" }}\r\n          ref={(ref) => { this.map = ref }}\r\n          center={position}\r\n          zoom={this.state.zoom}\r\n          dragging={this.state.draggable}\r\n          minZoom={6}\r\n          maxZoom={10}\r\n          onzoomend={this.enableDragging}\r\n        >>\r\n          {/* {\r\n             arrCities.map((city, i ) => {\r\n              return <Polygon\r\n              key={i}\r\n              positions={city.geometry.coordinates}\r\n              color={this.getRandomColor()}\r\n              >\r\n                <Tooltip>\r\n                  {city.natLevName}: {arrCityNames[i]}\r\n                  <br/>\r\n                  Populatie: {city.population}\r\n                </Tooltip>\r\n              </Polygon>\r\n          })\r\n          } */}\r\n\r\n\r\n          {\r\n            arrCounty.map((county, i) => {\r\n              return <Polygon\r\n                key={i}\r\n                positions={county.geometry.coordinates}\r\n                color={this.getRandomColor()}\r\n              >\r\n                <Tooltip>\r\n                  Judet: {county.properties.name}\r\n                  <br />\r\n                  Populatie: {county.properties.pop2011}\r\n                </Tooltip>\r\n              </Polygon>\r\n            })\r\n          }\r\n          {/* <Polygon\r\n        positions={data.geometry.coordinates}\r\n        color=\"yellow\"\r\n        fillColor=\"black\"\r\n      >\r\n         <Tooltip>\r\n           Judet: {data.name}\r\n           <br/>\r\n          Populatie: {data.population}\r\n         </Tooltip>\r\n      </Polygon> */}\r\n          <TileLayer\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <FeatureGroup color=\"purple\">\r\n            <Popup>Popup in FeatureGroup</Popup>\r\n          </FeatureGroup>\r\n        </Map>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}