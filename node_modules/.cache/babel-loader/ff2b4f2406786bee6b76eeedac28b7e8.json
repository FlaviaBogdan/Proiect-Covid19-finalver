{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\I353387\\\\Desktop\\\\proiect-covid-master\\\\src\\\\Components\\\\ColorMap.js\";\nimport React, { Component } from 'react';\nimport { FeatureGroup, Map, Popup, TileLayer, Polygon, Tooltip } from 'react-leaflet';\nimport data from \"./arWorks.json\";\nexport default class OtherLayersExample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomColor = () => {\n      var letters = '0123456789ABCDEF';\n      var color = '#';\n\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n\n      return color;\n    };\n\n    this.getMapZoom = () => {\n      return this.map && this.map.leafletElement.getZoom();\n    };\n\n    this.enableDragging = () => {\n      if (this.getMapZoom() < 8) {\n        this.setState({\n          draggable: false\n        });\n        return;\n      }\n\n      this.setState({\n        draggable: true\n      });\n    };\n\n    this.state = {\n      lat: 46.0,\n      lng: 25.096306,\n      zoom: 7,\n      draggable: false,\n      day: props.day,\n      width: 0,\n      height: 0\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.day !== state.day) {\n      return {\n        day: props.day\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    let arrCities = [];\n    let arrCityNames = [];\n\n    if (this.getMapZoom() > 8) {\n      for (let city in data.cities) {\n        let item = data.cities[city];\n        arrCities.push(item);\n        console.log(item);\n        arrCityNames.push(city);\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Map, {\n      style: {\n        width: this.state.width,\n        height: this.state.height\n      },\n      ref: ref => {\n        this.map = ref;\n      },\n      center: position,\n      zoom: this.state.zoom,\n      dragging: this.state.draggable,\n      minZoom: 7,\n      maxZoom: 10,\n      onzoomend: this.enableDragging,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }, \">\", arrCities.map((city, i) => {\n      return /*#__PURE__*/React.createElement(Polygon, {\n        key: i,\n        positions: city.geometry.coordinates,\n        color: this.getRandomColor(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, city.natLevName, \": \", arrCityNames[i], /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 19\n        }\n      }), \"Populatie: \", city.population));\n    }), /*#__PURE__*/React.createElement(Polygon, {\n      positions: data.geometry.coordinates,\n      color: \"yellow\",\n      fillColor: \"black\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 10\n      }\n    }, \"Judet: \", data.name, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 12\n      }\n    }), \"Populatie: \", data.population)), /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(FeatureGroup, {\n      color: \"purple\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }, \"Popup in FeatureGroup\")));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/I353387/Desktop/proiect-covid-master/src/Components/ColorMap.js"],"names":["React","Component","FeatureGroup","Map","Popup","TileLayer","Polygon","Tooltip","data","OtherLayersExample","constructor","props","getRandomColor","letters","color","i","Math","floor","random","getMapZoom","map","leafletElement","getZoom","enableDragging","setState","draggable","state","lat","lng","zoom","day","width","height","updateWindowDimensions","getDerivedStateFromProps","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","innerWidth","innerHeight","render","position","arrCities","arrCityNames","city","cities","item","push","console","log","ref","geometry","coordinates","natLevName","population","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n  FeatureGroup,\r\n  Map,\r\n  Popup,\r\n  TileLayer,\r\n  Polygon,\r\n  Tooltip\r\n} from 'react-leaflet'\r\n\r\n\r\nimport data from \"./arWorks.json\";\r\n\r\n\r\nexport default class OtherLayersExample extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lat: 46.0,\r\n            lng: 25.096306,\r\n            zoom: 7,\r\n            draggable: false,\r\n            day: props.day,\r\n            width: 0, height: 0\r\n        };\r\n        this.updateWindowDimensions = this.updateWindowDimensions;\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n      if (props.day !== state.day) {\r\n        return {\r\n          day: props.day\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    map;\r\n\r\n    componentDidMount() {\r\n      this.updateWindowDimensions();\r\n      window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n      window.removeEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n    \r\n    updateWindowDimensions() {\r\n      this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    getRandomColor = () => {\r\n      var letters = '0123456789ABCDEF';\r\n      var color = '#';\r\n      for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n      }\r\n      return color;\r\n    }\r\n  //  drawCities = () => {\r\n  //    let arrCities = [];\r\n  //     for(let city in data.cities) {\r\n  //       let item = data.cities[city];\r\n  //       arrCities.push(item);\r\n  //     }\r\n  //     arrCities.map((city, i ) => {\r\n  //         return <Polygon\r\n  //         positions={city.geometry.coordinates}\r\n  //         color=\"red\"\r\n  //         >\r\n  //           <Tooltip>TOOLTIP</Tooltip>\r\n  //         </Polygon>\r\n  //     });\r\n  //  }\r\n\r\n    getMapZoom = () => {\r\n      return this.map && this.map.leafletElement.getZoom();\r\n    }\r\n    enableDragging = () => {\r\n      if (this.getMapZoom() < 8) {\r\n          this.setState({draggable: false});\r\n          return;\r\n      }\r\n      this.setState({draggable: true});\r\n    };\r\n\r\n  render() {\r\n    const position = [this.state.lat, this.state.lng];\r\n    let arrCities = [];\r\n    let arrCityNames = [];\r\n    if (this.getMapZoom() > 8) {\r\n      for(let city in data.cities) {\r\n        let item = data.cities[city];\r\n        arrCities.push(item);\r\n        console.log(item);\r\n        arrCityNames.push(city);\r\n      }\r\n    }\r\n        return (\r\n\r\n\r\n      <Map style={{width: this.state.width, height : this.state.height}}\r\n      ref = {(ref) => {this.map = ref}}\r\n      center={position}\r\n      zoom={this.state.zoom}\r\n      dragging={this.state.draggable}\r\n      minZoom={7}\r\n      maxZoom={10}\r\n      onzoomend={this.enableDragging}\r\n      >>\r\n          {\r\n             arrCities.map((city, i ) => {\r\n              return <Polygon\r\n              key={i}\r\n              positions={city.geometry.coordinates}\r\n              color={this.getRandomColor()}\r\n              >\r\n                <Tooltip>\r\n                  {city.natLevName}: {arrCityNames[i]}\r\n                  <br/>\r\n                  Populatie: {city.population}\r\n                </Tooltip>\r\n              </Polygon>\r\n          })\r\n          }\r\n                <Polygon\r\n        positions={data.geometry.coordinates}\r\n        color=\"yellow\"\r\n        fillColor=\"black\"\r\n      >\r\n         <Tooltip>\r\n           Judet: {data.name}\r\n           <br/>\r\n          Populatie: {data.population}\r\n         </Tooltip>\r\n      </Polygon>\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <FeatureGroup color=\"purple\">\r\n          <Popup>Popup in FeatureGroup</Popup>\r\n        </FeatureGroup>\r\n      </Map>\r\n\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}